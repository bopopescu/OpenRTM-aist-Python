# Python stubs generated by omniidl from DataPort.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(2,0, __file__)


#
# Start of module "RTC"
#
__name__ = "RTC"
_0_RTC = omniORB.openModule("RTC", r"DataPort.idl")
_0_RTC__POA = omniORB.openModule("RTC__POA", r"DataPort.idl")


# interface InPortAny
_0_RTC._d_InPortAny = (omniORB.tcInternal.tv_objref, "IDL:RTC/InPortAny:1.0", "InPortAny")
omniORB.typeMapping["IDL:RTC/InPortAny:1.0"] = _0_RTC._d_InPortAny
_0_RTC.InPortAny = omniORB.newEmptyClass()
class InPortAny :
    _NP_RepositoryId = _0_RTC._d_InPortAny[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.InPortAny = InPortAny
_0_RTC._tc_InPortAny = omniORB.tcInternal.createTypeCode(_0_RTC._d_InPortAny)
omniORB.registerType(InPortAny._NP_RepositoryId, _0_RTC._d_InPortAny, _0_RTC._tc_InPortAny)

# InPortAny operations and attributes
InPortAny._d_put = ((omniORB.tcInternal.tv_any, ), None, None)

# InPortAny object reference
class _objref_InPortAny (CORBA.Object):
    _NP_RepositoryId = InPortAny._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def put(self, *args):
        return _omnipy.invoke(self, "put", _0_RTC.InPortAny._d_put, args)

    __methods__ = ["put"] + CORBA.Object.__methods__

omniORB.registerObjref(InPortAny._NP_RepositoryId, _objref_InPortAny)
_0_RTC._objref_InPortAny = _objref_InPortAny
del InPortAny, _objref_InPortAny

# InPortAny skeleton
__name__ = "RTC__POA"
class InPortAny (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.InPortAny._NP_RepositoryId


    _omni_op_d = {"put": _0_RTC.InPortAny._d_put}

InPortAny._omni_skeleton = InPortAny
_0_RTC__POA.InPortAny = InPortAny
del InPortAny
__name__ = "RTC"

# interface OutPortAny
_0_RTC._d_OutPortAny = (omniORB.tcInternal.tv_objref, "IDL:RTC/OutPortAny:1.0", "OutPortAny")
omniORB.typeMapping["IDL:RTC/OutPortAny:1.0"] = _0_RTC._d_OutPortAny
_0_RTC.OutPortAny = omniORB.newEmptyClass()
class OutPortAny :
    _NP_RepositoryId = _0_RTC._d_OutPortAny[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.OutPortAny = OutPortAny
_0_RTC._tc_OutPortAny = omniORB.tcInternal.createTypeCode(_0_RTC._d_OutPortAny)
omniORB.registerType(OutPortAny._NP_RepositoryId, _0_RTC._d_OutPortAny, _0_RTC._tc_OutPortAny)

# OutPortAny operations and attributes
OutPortAny._d_get = ((), (omniORB.tcInternal.tv_any, ), None)

# OutPortAny object reference
class _objref_OutPortAny (CORBA.Object):
    _NP_RepositoryId = OutPortAny._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def get(self, *args):
        return _omnipy.invoke(self, "get", _0_RTC.OutPortAny._d_get, args)

    __methods__ = ["get"] + CORBA.Object.__methods__

omniORB.registerObjref(OutPortAny._NP_RepositoryId, _objref_OutPortAny)
_0_RTC._objref_OutPortAny = _objref_OutPortAny
del OutPortAny, _objref_OutPortAny

# OutPortAny skeleton
__name__ = "RTC__POA"
class OutPortAny (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.OutPortAny._NP_RepositoryId


    _omni_op_d = {"get": _0_RTC.OutPortAny._d_get}

OutPortAny._omni_skeleton = OutPortAny
_0_RTC__POA.OutPortAny = OutPortAny
del OutPortAny
__name__ = "RTC"

#
# End of module "RTC"
#
__name__ = "DataPort_idl"

_exported_modules = ( "RTC", )

# The end.
