# Python stubs generated by omniidl from MyService.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(2,0, __file__)


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"MyService.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"MyService.idl")


# interface MyService
_0__GlobalIDL._d_MyService = (omniORB.tcInternal.tv_objref, "IDL:MyService:1.0", "MyService")
omniORB.typeMapping["IDL:MyService:1.0"] = _0__GlobalIDL._d_MyService
_0__GlobalIDL.MyService = omniORB.newEmptyClass()
class MyService :
    _NP_RepositoryId = _0__GlobalIDL._d_MyService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0__GlobalIDL.MyService = MyService
_0__GlobalIDL._tc_MyService = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_MyService)
omniORB.registerType(MyService._NP_RepositoryId, _0__GlobalIDL._d_MyService, _0__GlobalIDL._tc_MyService)

# MyService operations and attributes
MyService._d_echo = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# MyService object reference
class _objref_MyService (CORBA.Object):
    _NP_RepositoryId = MyService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def echo(self, *args):
        return _omnipy.invoke(self, "echo", _0__GlobalIDL.MyService._d_echo, args)

    __methods__ = ["echo"] + CORBA.Object.__methods__

omniORB.registerObjref(MyService._NP_RepositoryId, _objref_MyService)
_0__GlobalIDL._objref_MyService = _objref_MyService
del MyService, _objref_MyService

# MyService skeleton
__name__ = "_GlobalIDL__POA"
class MyService (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.MyService._NP_RepositoryId


    _omni_op_d = {"echo": _0__GlobalIDL.MyService._d_echo}

MyService._omni_skeleton = MyService
_0__GlobalIDL__POA.MyService = MyService
del MyService
__name__ = "_GlobalIDL"

#
# End of module "_GlobalIDL"
#
__name__ = "MyService_idl"

_exported_modules = ( "_GlobalIDL", )

# The end.
